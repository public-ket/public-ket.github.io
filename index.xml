<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benjamin Pring on Academic website for Benjamin Pring</title>
    <link>https://public-ket.github.io/</link>
    <description>Recent content in Benjamin Pring on Academic website for Benjamin Pring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Mon, 04 Jan 2021 00:08:21 -0500</lastBuildDate><atom:link href="https://public-ket.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Papers</title>
      <link>https://public-ket.github.io/papers/</link>
      <pubDate>Mon, 04 Jan 2021 03:10:41 -0500</pubDate>
      
      <guid>https://public-ket.github.io/papers/</guid>
      <description>“Parallelism strategies for the tuneable golden claw-finding problem.
Azarderakhsh, R., Biasse, J.F., El Khatib, R., Langenberg, B., Pring, B.
International Journal of Computer Mathematics (2020)
We examine the impact of the &amp;quot;Tiny Claw&amp;quot; algorithm proposed in BP2020 on the cost of attacking the SIKE public-key cryptosystem, under realistic assumptions concerning hardware layout, classical memory-access costs and the cost of the neccessary quantum circuit that computes arbitrary degree isogeny paths. We observe that whilst the original Tiny Claw algorithm does not reach its full potential under these assumptions, our adaptations and new options for parallelism mean that even in a pessimistic cost model for classical memory-access costs, the Tiny Claw algorithm may offer competitive or superior performance compared to other quantum algorithms, under the assumption that qubits require computational effort to maintain.</description>
    </item>
    
    <item>
      <title>Research</title>
      <link>https://public-ket.github.io/research/</link>
      <pubDate>Mon, 04 Jan 2021 03:10:41 -0500</pubDate>
      
      <guid>https://public-ket.github.io/research/</guid>
      <description>Research interests My main topic of interest lies in the both the creation and modelling of quantum algorithms - in particular quantum search algorithms. which impact upon the security of post-quantum cryptosystems, such as those proposed in the NIST post-quantum standardisation effort. I also have interests in quantum circuit synthesis techniques, computer algebra and cryptanalysis.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://public-ket.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://public-ket.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://public-ket.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://public-ket.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://public-ket.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://public-ket.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate from Jekyll</title>
      <link>https://public-ket.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://public-ket.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>
